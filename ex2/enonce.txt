Nous souhaiterions implémenter un programme reproduisant un avatar adoptant successivement différentes émotions. 

Ce dernier peut être heureux, joyeux, triste, en colère, ronchon et passe, dans l’ordre (éventuellement en continu) par ces différentes émotions lors de l’exécution. 
Il faut alors attendre un délai de 5 secondes entre chaque transition. 

Les émotions de l’avatar peuvent être modélisées par des smiley affichés à l’écran. 
L’objectif est d’architecturer un programme pour simuler ce comportement. 
Dans une classe Avatar manipuler une variable de type AvatarState * contenant successivement les types spécialisés Glad, Happy, Sad, Angry, Grumpy.
Proposer une classe abstraite AvatarState avec deux méthode. La première void action() affiche un smiley pour transcrire l’émotion courante. 
La seconde AvatarState next() retourne l’objet AvatarState * suivant ; i.e. représentant l’émotion suivante. 
Rajouter une méthode void run() dans la classe Avatar pour afficher l’émotion courante et jouer la transition d’émotion.

Que se serait-il passé si nous avions implémenté la transition d’une émotion à l’autre via un chaînage de fonctions : glad() -> happy() -> sad() -> angry() -> grumpy() -> glad() -> … ?
Malgré quelques lourdeurs d’implémentation, quel est l’avantage d’une telle approche ?


